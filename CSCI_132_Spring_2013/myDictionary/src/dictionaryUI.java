
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;

/**
 *
 * @author Kaleb
 */
public class dictionaryUI extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public dictionaryUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        upaddpanel = new JPanel();
        lookupField = new JTextField();
        welcomelabel = new JLabel();
        addWordTF = new JTextField();
        unfoundlabel = new JLabel();
        inoutpanel = new JPanel();
        jScrollPane1 = new JScrollPane();
        deffinitionReturnTA = new JTextArea();
        jLabel3 = new JLabel();
        jScrollPane2 = new JScrollPane();
        deffinitionInputTA = new JTextArea();
        savebut = new JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        deffinitionReturnTA.setFocusable(false);
        lookupField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                lookupFieldKeyPressed(evt);
            }
        });
        
        addWordTF.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                addWordTF(evt);
            }
        });
        deffinitionInputTA.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                deffinitionInputTAKeyPressed(evt);
            }
        });
        savebut.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                savebutKeyPressed(evt);
            }
        });
        savebut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    savebutMouseClicked(evt);
                } catch (IOException ex) {
                    Logger.getLogger(dictionaryUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        welcomelabel.setText("Welcome to my Dictionary Program, please enter a word to see it's deffinition");

        unfoundlabel.setText("Couldn't find a word? Please enter it here, followed by it's deffinition");

        GroupLayout upaddpanelLayout = new GroupLayout(upaddpanel);
        upaddpanel.setLayout(upaddpanelLayout);
        upaddpanelLayout.setHorizontalGroup(
                upaddpanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(GroupLayout.Alignment.TRAILING, upaddpanelLayout.createSequentialGroup()
                .addGroup(upaddpanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(upaddpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomelabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(43, 43, 43))
                .addGroup(upaddpanelLayout.createSequentialGroup()
                .addComponent(lookupField, GroupLayout.PREFERRED_SIZE, 380, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(upaddpanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(unfoundlabel)
                .addComponent(addWordTF, GroupLayout.PREFERRED_SIZE, 380, GroupLayout.PREFERRED_SIZE))
                .addContainerGap()));
        upaddpanelLayout.setVerticalGroup(
                upaddpanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(upaddpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(upaddpanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(lookupField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(unfoundlabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(upaddpanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(welcomelabel, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                .addComponent(addWordTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE)));

        deffinitionReturnTA.setColumns(20);
        deffinitionReturnTA.setRows(5);
        jScrollPane1.setViewportView(deffinitionReturnTA);

        jLabel3.setText("Once you click \"Save\" the word and it's deffinition will be added to your dictionary");

        deffinitionInputTA.setColumns(20);
        deffinitionInputTA.setRows(5);
        jScrollPane2.setViewportView(deffinitionInputTA);

        savebut.setText("Save");

        GroupLayout inoutpanelLayout = new GroupLayout(inoutpanel);
        inoutpanel.setLayout(inoutpanelLayout);
        inoutpanelLayout.setHorizontalGroup(
                inoutpanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(inoutpanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 380, GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(inoutpanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(inoutpanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2))
                .addComponent(jLabel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
                .addGroup(GroupLayout.Alignment.TRAILING, inoutpanelLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(savebut)
                .addGap(157, 157, 157)));
        inoutpanelLayout.setVerticalGroup(
                inoutpanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(inoutpanelLayout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inoutpanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                .addComponent(jScrollPane2))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(savebut)
                .addContainerGap()));

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(upaddpanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(inoutpanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                .addComponent(upaddpanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inoutpanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        pack();
    }// </editor-fold>                        

    private void lookupFieldKeyPressed(KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            lookupField.setText(lookupField.getText());
            deffinitionReturnTA.setText("Your word was not found in the dictionary.");
            //START LOGIC
            BinaryTree.preOrderTraversalSearch(Driver.dictionary.getRoot());
            //END LOGIC
            lookupField.setText("");
        }
    }
    private void  addWordTF(KeyEvent evt){
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addWordTF.setText(addWordTF.getText());
            deffinitionInputTA.requestFocusInWindow();                                           
        }
    }
    private void deffinitionInputTAKeyPressed(KeyEvent evt){
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            deffinitionInputTA.setText(deffinitionInputTA.getText());
            savebut.requestFocusInWindow();                                           
        }
    }
    private void savebutKeyPressed(KeyEvent evt){
        System.out.println("Please actually \"click\" on the \"Save\" button to add this word and deffinition \n"
                + "to the dictionary.");
        addWordTF.requestFocusInWindow();
    }
    
    
    
    private void savebutMouseClicked(java.awt.event.MouseEvent evt) throws IOException {
        String text = addWordTF.getText().concat(" ").concat(deffinitionInputTA.getText());
        FileWriter fileWriter = new FileWriter(Driver.src2, true);
        BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
        if(!text.equals(null)){
        bufferedWriter.write(text);
        bufferedWriter.close();
        } else if(text == null || text == " "){
            deffinitionInputTA.setText("please enter a word and a deffinition to be added to the dictionary.");
        }
        System.out.println("inserting " + addWordTF.getText().concat(" ").concat(deffinitionInputTA.getText()) + "...");
        
        BinaryTree.preOrderTraversalReset(Driver.dictionary.getRoot());
        Driver.runProgram();
        System.out.println();
        System.out.println("Please relaunch the program, your new word will now be in your dictionary.");
        System.out.println();
            System.exit(0);
    }    
    
    
    
    

    void setlookupOutput(String s) {
        deffinitionReturnTA.setText(s);
    }

    String getlookupOutput() {
        return deffinitionReturnTA.getText();
    }

    /**
     * @param args the command line arguments
     */
    public static void run() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dictionaryUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dictionaryUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dictionaryUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dictionaryUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }



        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dictionaryUI().setVisible(true);
            }
        });
    }
    public static JTextField addWordTF;
    public static JTextArea deffinitionInputTA;
    private JPanel inoutpanel;
    private JLabel jLabel3;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    public static JTextField lookupField;
    public static JTextArea deffinitionReturnTA;
    private JButton savebut;
    private JLabel unfoundlabel;
    private JPanel upaddpanel;
    private JLabel welcomelabel;
    private static TreeNode insertNode;
}
