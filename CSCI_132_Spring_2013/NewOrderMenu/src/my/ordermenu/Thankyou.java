/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package my.ordermenu;

/**
 *
 * @author Kaleb
 */
public class Thankyou extends javax.swing.JFrame {

    /**
     * Creates new form Thankyou
     */
    public Thankyou() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor. Thanks - Kaleb
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="This code is wrapped and controls the layout edit cautiously">                          
    private void initComponents() {

        thankyoulbl = new javax.swing.JLabel();
        arrivelbl = new javax.swing.JLabel();
        finishbut = new javax.swing.JButton();
        totallbl = new javax.swing.JLabel();
        totalcostlbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        thankyoulbl.setText("Thankyou For Your Order!");

        arrivelbl.setText("Your Meal should arrive in approx. 15 minutes.");

        finishbut.setText("Finish");
        finishbut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                finishbutMouseClicked(evt);
            }
        });

        totallbl.setText("Total Cost:");

        totalcostlbl.setText("---------------------------");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(thankyoulbl))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(totallbl)
                            .addComponent(arrivelbl)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(totalcostlbl)
                            .addComponent(finishbut))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(thankyoulbl)
                .addGap(18, 18, 18)
                .addComponent(arrivelbl)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totallbl)
                    .addComponent(totalcostlbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(finishbut)
                .addGap(62, 62, 62))
        );

        pack();
    }// </editor-fold>                        
// <editor-fold defaultstate="collapsed" desc="This is the method for sending all the info to the kitchen">
    private void finishbutMouseClicked(java.awt.event.MouseEvent evt) {                                       
        //System.exit(0);
        setVisible(false);
        new Kitchen().setVisible(true);
        tablecheck();
        sectioncheck();
        coffeecheck();
        decafcheck();
        hotteacheck();
        coldteacheck();
        peachcheck();
        lemoncheck();
        mintcheck();
        pepsicheck();
        dpepsicheck();
        mdcheck();
        sierracheck();
        pmaxcheck();
        ponecheck();
        rbcheck();
        nachocheck();
        buffcheck();
        sautmushcheck();
        samplecheck();
        cwscheck();
        ffcheck();
        extrcheck();
        extscheck();
        extsccheck();
        request1check();
        tbonecheck();
        frenchcheck();
        classcheck();
        housecheck();
        caesarcheck();
        sbarcheck();
        daysoupcheck();
        bsoupcheck();
        clamcheck();
        request2check();
        chscakecheck();
        hfscheck();
        vancheck();
        ciccheck();
        banscheck();
        rbfcheck();
    }                                      

        public void tablecheck(){
            Kitchen.tablelbl.setText(MenuOrderUI.tabletxt.getText());
    }
        public void sectioncheck(){
            Kitchen.sectionlbl.setText(MenuOrderUI.sectiontxt.getText());
    }
        public void coffeecheck(){
            if(MenuOrderUI.coffeechk.isSelected()){
            Kitchen.coffeelbl.setText(MenuOrderUI.coffeechk.getText());
            Kitchen.coffeenumlbl.setText(MenuOrderUI.coffeetxt.getText());    
            }
            if(MenuOrderUI.coffeechk.isSelected() && MenuOrderUI.coffeetxt.getText().equals("")){
                Kitchen.coffeenumlbl.setText(" 1 ");
            }
    }
        public void decafcheck(){
            if(MenuOrderUI.decafchk.isSelected()){
            Kitchen.decaflbl.setText(MenuOrderUI.decafchk.getText());
            Kitchen.decafnumlbl.setText(MenuOrderUI.decaftxt.getText());    
            }
            if(MenuOrderUI.decafchk.isSelected() && MenuOrderUI.decaftxt.getText().equals("")){
                Kitchen.decafnumlbl.setText(" 1 ");
            }
}

        public void hotteacheck(){
            if(MenuOrderUI.hotteachk.isSelected()){
            Kitchen.hottealbl.setText(MenuOrderUI.hotteachk.getText());
            Kitchen.hotteanumlbl.setText(MenuOrderUI.hotteatxt.getText());    
            }
            if(MenuOrderUI.hotteachk.isSelected() && MenuOrderUI.hotteatxt.getText().equals("")){
                Kitchen.hotteanumlbl.setText(" 1 ");
            }

}
        public void coldteacheck(){
            if(MenuOrderUI.coldteachk.isSelected()){
            Kitchen.coldtealbl.setText(MenuOrderUI.coldteachk.getText());
            Kitchen.coldteanumlbl.setText(MenuOrderUI.coldteatxt.getText());    
            }
            if(MenuOrderUI.coldteachk.isSelected() && MenuOrderUI.coldteatxt.getText().equals("")){
                Kitchen.coldteanumlbl.setText(" 1 ");
            }

}
        public void peachcheck(){
            if(MenuOrderUI.peachbut.isSelected()){
            Kitchen.peachlbl.setText(MenuOrderUI.peachbut.getText());
            Kitchen.peachnumlbl.setText(MenuOrderUI.peachteatxt.getText());    
            }
            

}
        public void lemoncheck(){
            if(MenuOrderUI.lemonbut.isSelected()){
            Kitchen.lemonlbl.setText(MenuOrderUI.lemonbut.getText());
            Kitchen.lemonnumlbl.setText(MenuOrderUI.lemonteatxt.getText());    
            }
            

}
        public void mintcheck(){
            if(MenuOrderUI.mintbut.isSelected()){
            Kitchen.mintlbl.setText(MenuOrderUI.mintbut.getText());
            Kitchen.mintnumlbl.setText(MenuOrderUI.mintteatxt.getText());    
            }
            

}
        public void pepsicheck(){
            if(MenuOrderUI.pepsichk.isSelected()){
            Kitchen.pepsilbl.setText(MenuOrderUI.pepsichk.getText());
            Kitchen.pepsinumlbl.setText(MenuOrderUI.pepsitxt.getText());    
            }
            if(MenuOrderUI.pepsichk.isSelected() && MenuOrderUI.pepsitxt.getText().equals("")){
                Kitchen.pepsinumlbl.setText(" 1 ");
            }

}
        public void dpepsicheck(){
            if(MenuOrderUI.dpchk.isSelected()){
            Kitchen.dplbl.setText(MenuOrderUI.dpchk.getText());
            Kitchen.dpnumlbl.setText(MenuOrderUI.dptxt.getText());    
            }
            if(MenuOrderUI.dpchk.isSelected() && MenuOrderUI.dptxt.getText().equals("")){
                Kitchen.dpnumlbl.setText(" 1 ");
            }

}
        public void mdcheck(){
            if(MenuOrderUI.mdchk.isSelected()){
            Kitchen.mdlbl.setText(MenuOrderUI.mdchk.getText());
            Kitchen.mdnumlbl.setText(MenuOrderUI.mdtxt.getText());    
            }
            if(MenuOrderUI.mdchk.isSelected() && MenuOrderUI.mdtxt.getText().equals("")){
                Kitchen.mdnumlbl.setText(" 1 ");
            }

}
        public void sierracheck(){
            if(MenuOrderUI.sierrachk.isSelected()){
            Kitchen.sierralbl.setText(MenuOrderUI.sierrachk.getText());
            Kitchen.sierranumlbl.setText(MenuOrderUI.sierratxt.getText());    
            }
            if(MenuOrderUI.sierrachk.isSelected() && MenuOrderUI.sierratxt.getText().equals("")){
                Kitchen.sierranumlbl.setText(" 1 ");
            }

}
        public void pmaxcheck(){
            if(MenuOrderUI.pmaxchk.isSelected()){
            Kitchen.pmaxlbl.setText(MenuOrderUI.pmaxchk.getText());
            Kitchen.pmaxnumlbl.setText(MenuOrderUI.pmaxtxt.getText());    
            }
            if(MenuOrderUI.pmaxchk.isSelected() && MenuOrderUI.pmaxtxt.getText().equals("")){
                Kitchen.pmaxnumlbl.setText(" 1 ");
            }

}
        public void ponecheck(){
            if(MenuOrderUI.ponechk.isSelected()){
            Kitchen.ponelbl.setText(MenuOrderUI.ponechk.getText());
            Kitchen.ponenumlbl.setText(MenuOrderUI.ponetxt.getText());    
            }
            if(MenuOrderUI.ponechk.isSelected() && MenuOrderUI.ponetxt.getText().equals("")){
                Kitchen.ponenumlbl.setText(" 1 ");
            }

}
        public void rbcheck(){
            if(MenuOrderUI.rbchk.isSelected()){
            Kitchen.rblbl.setText(MenuOrderUI.rbchk.getText());
            Kitchen.rbnumlbl.setText(MenuOrderUI.rbtxt.getText());    
            }
            if(MenuOrderUI.rbchk.isSelected() && MenuOrderUI.rbtxt.getText().equals("")){
                Kitchen.rbnumlbl.setText(" 1 ");
            }

}
        public void nachocheck(){
            if(MenuOrderUI.nachochk.isSelected()){
            Kitchen.nacholbl.setText(MenuOrderUI.nachochk.getText());
            }
            

}
        public void buffcheck(){
            if(MenuOrderUI.buffchk.isSelected()){
            Kitchen.bufflbl.setText(MenuOrderUI.buffchk.getText());    
            }

}
        public void sautmushcheck(){
            if(MenuOrderUI.sautmushchk.isSelected()){
            Kitchen.sautmushlbl.setText(MenuOrderUI.sautmushchk.getText());    
            }

}
        public void samplecheck(){
            if(MenuOrderUI.samplechk.isSelected()){
            Kitchen.samplelbl.setText(MenuOrderUI.samplechk.getText());    
            }

}
        public void cwscheck(){
            if(MenuOrderUI.cwschk.isSelected()){
            Kitchen.cwslbl.setText("Chips n' Salsa");   
            }

}
        public void ffcheck(){
            if(MenuOrderUI.ffchk.isSelected()){
            Kitchen.fflbl.setText(MenuOrderUI.ffchk.getText());    
            }

}
        public void extrcheck(){
            if(MenuOrderUI.extrbut.isSelected()){
            Kitchen.extrlbl.setText(MenuOrderUI.extrbut.getText());    
            }

}
        public void extscheck(){
            if(MenuOrderUI.extsbut.isSelected()){
            Kitchen.extslbl.setText(MenuOrderUI.extsbut.getText());    
            }

}
        public void extsccheck(){
            if(MenuOrderUI.extscbut.isSelected()){
            Kitchen.extsclbl.setText(MenuOrderUI.extscbut.getText());    
            }

}
        public void request1check(){
            Kitchen.request1lbl.setText(MenuOrderUI.request1txt.getText());
            }
        public void tbonecheck(){
            if(MenuOrderUI.tbonechk.isSelected()){
            Kitchen.tbonelbl.setText(MenuOrderUI.tbonechk.getText());
            Kitchen.tbonenumlbl.setText(MenuOrderUI.tbonetxt.getText());    
            }
            if(MenuOrderUI.tbonechk.isSelected() && MenuOrderUI.tbonetxt.getText().equals("")){
                Kitchen.tbonenumlbl.setText(" 1 ");
            }

}
        public void frenchcheck(){
            if(MenuOrderUI.frenchchk.isSelected()){
            Kitchen.frenchlbl.setText(MenuOrderUI.frenchchk.getText());
            Kitchen.frenchnumlbl.setText(MenuOrderUI.frenchtxt.getText());    
            }
            if(MenuOrderUI.frenchchk.isSelected() && MenuOrderUI.frenchtxt.getText().equals("")){
                Kitchen.frenchnumlbl.setText(" 1 ");
            }

}
        public void classcheck(){
            if(MenuOrderUI.classchk.isSelected()){
            Kitchen.classlbl.setText(MenuOrderUI.classchk.getText());
            Kitchen.classnumlbl.setText(MenuOrderUI.classtxt.getText());    
            }
            if(MenuOrderUI.classchk.isSelected() && MenuOrderUI.classtxt.getText().equals("")){
                Kitchen.classnumlbl.setText(" 1 ");
            }

}
        public void housecheck(){
            if(MenuOrderUI.housechk.isSelected()){
            Kitchen.houselbl.setText(MenuOrderUI.housechk.getText());
            Kitchen.housenumlbl.setText(MenuOrderUI.housetxt.getText());    
            }
            if(MenuOrderUI.housechk.isSelected() && MenuOrderUI.housetxt.getText().equals("")){
                Kitchen.housenumlbl.setText(" 1 ");
            }

}
        public void caesarcheck(){
            if(MenuOrderUI.caesarchk.isSelected()){
            Kitchen.caesarlbl.setText(MenuOrderUI.caesarchk.getText());
            Kitchen.caesarnumlbl.setText(MenuOrderUI.caesartxt.getText());    
            }
            if(MenuOrderUI.caesarchk.isSelected() && MenuOrderUI.caesartxt.getText().equals("")){
                Kitchen.caesarnumlbl.setText(" 1 ");
            }

}
        public void sbarcheck(){
            if(MenuOrderUI.sbarchk.isSelected()){
            Kitchen.sbarlbl.setText(MenuOrderUI.sbarchk.getText());
            Kitchen.sbarnumlbl.setText(MenuOrderUI.sbartxt.getText());    
            }
            if(MenuOrderUI.sbarchk.isSelected() && MenuOrderUI.sbartxt.getText().equals("")){
                Kitchen.sbarnumlbl.setText(" 1 ");
            }

}
        public void daysoupcheck(){
            if(MenuOrderUI.daysoupchk.isSelected()){
            Kitchen.daysouplbl.setText(MenuOrderUI.daysoupchk.getText());
            Kitchen.daysoupnumlbl.setText(MenuOrderUI.daysouptxt.getText());    
            }
            if(MenuOrderUI.daysoupchk.isSelected() && MenuOrderUI.daysouptxt.getText().equals("")){
                Kitchen.daysoupnumlbl.setText(" 1 ");
            }

}
        public void bsoupcheck(){
            if(MenuOrderUI.bsoupchk.isSelected()){
            Kitchen.bsouplbl.setText(MenuOrderUI.bsoupchk.getText());
            Kitchen.bsoupnumlbl.setText(MenuOrderUI.bsouptxt.getText());    
            }
            if(MenuOrderUI.bsoupchk.isSelected() && MenuOrderUI.bsouptxt.getText().equals("")){
                Kitchen.bsoupnumlbl.setText(" 1 ");
            }

}
        public void clamcheck(){
            if(MenuOrderUI.clamchk.isSelected()){
            Kitchen.clamlbl.setText(MenuOrderUI.clamchk.getText());
            Kitchen.clamnumlbl.setText(MenuOrderUI.clamtxt.getText());    
            }
            if(MenuOrderUI.clamchk.isSelected() && MenuOrderUI.clamtxt.getText().equals("")){
                Kitchen.clamnumlbl.setText(" 1 ");
            }

}
        public void request2check(){
            Kitchen.request2lbl.setText(MenuOrderUI.request2txt.getText());
    }
        public void chscakecheck(){
            if(MenuOrderUI.chscakechk.isSelected()){
            Kitchen.chscakelbl.setText(MenuOrderUI.chscakechk.getText());
            Kitchen.chscakenumlbl.setText(MenuOrderUI.chscaketxt.getText());    
            }
            if(MenuOrderUI.chscakechk.isSelected() && MenuOrderUI.chscaketxt.getText().equals("")){
                Kitchen.chscakenumlbl.setText(" 1 ");
            }

}
        public void hfscheck(){
            if(MenuOrderUI.hfschk.isSelected()){
            Kitchen.hfslbl.setText(MenuOrderUI.hfschk.getText());
            Kitchen.hfsnumlbl.setText(MenuOrderUI.hfstxt.getText());    
            }
            if(MenuOrderUI.hfschk.isSelected() && MenuOrderUI.hfstxt.getText().equals("")){
                Kitchen.hfsnumlbl.setText(" 1 ");
            }

}
        public void vancheck(){
            if(MenuOrderUI.vanchk.isSelected()){
            Kitchen.vanlbl.setText(MenuOrderUI.vanchk.getText());
            Kitchen.vannumlbl.setText(MenuOrderUI.vantxt.getText());    
            }
            if(MenuOrderUI.vanchk.isSelected() && MenuOrderUI.vantxt.getText().equals("")){
                Kitchen.vannumlbl.setText(" 1 ");
            }

}
        public void ciccheck(){
            if(MenuOrderUI.cicchk.isSelected()){
            Kitchen.ciclbl.setText(MenuOrderUI.cicchk.getText());
            Kitchen.cicnumlbl.setText(MenuOrderUI.cictxt.getText());    
            }
            if(MenuOrderUI.cicchk.isSelected() && MenuOrderUI.cictxt.getText().equals("")){
                Kitchen.cicnumlbl.setText(" 1 ");
            }

}
        public void banscheck(){
            if(MenuOrderUI.banschk.isSelected()){
            Kitchen.banslbl.setText(MenuOrderUI.banschk.getText());
            Kitchen.bansnumlbl.setText(MenuOrderUI.banstxt.getText());    
            }
            if(MenuOrderUI.banschk.isSelected() && MenuOrderUI.banstxt.getText().equals("")){
                Kitchen.bansnumlbl.setText(" 1 ");
            }

}
        public void rbfcheck(){
            if(MenuOrderUI.rbfchk.isSelected()){
            Kitchen.rbflbl.setText(MenuOrderUI.rbfchk.getText());
            Kitchen.rbfnumlbl.setText(MenuOrderUI.rbftxt.getText());    
            }
            if(MenuOrderUI.rbfchk.isSelected() && MenuOrderUI.rbftxt.getText().equals("")){
                Kitchen.rbfnumlbl.setText(" 1 ");
            }

}
        //</editor-fold>
    /**
     * @param args the command line arguments
     */
    public static void run() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" again, lookandfeel, edit if you so desire ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Thankyou.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Thankyou.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Thankyou.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Thankyou.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Thankyou().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JLabel arrivelbl;
    private javax.swing.JButton finishbut;
    private javax.swing.JLabel thankyoulbl;
    public static javax.swing.JLabel totalcostlbl;
    private javax.swing.JLabel totallbl;
    // End of variables declaration                   
}
